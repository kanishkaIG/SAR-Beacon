
The error you are encountering suggests that the server is performing a JavaScript-based challenge before allowing access to the upload_data.php endpoint. This is a common technique used to block automated bots and non-browser clients (like your ESP32 or proxy server) from making requests to a website.

Explanation of the error:
The JavaScript code in the HTML response is using a script (aes.js) to decrypt or generate some data, such as a cookie, and redirect the browser to the correct endpoint. When you access the endpoint directly using Postman (which doesn't execute JavaScript), this challenge fails, and the server returns an error or redirects you to a page asking for JavaScript to be enabled.

This type of mechanism is designed to protect websites from bots and automated requests. Since your ESP32 and the proxy server (in this case, Heroku) do not run JavaScript, they are blocked by this protection.

Solutions:
There are a few potential ways to address this:

JavaScript Challenge Handling (not ideal for ESP32/Proxy server): The ideal way to handle this would be for your proxy server (or the ESP32) to simulate a browser and solve the JavaScript challenge automatically. However, this is a complex process, and the proxy server would need to:

Parse and execute the JavaScript (specifically, the AES decryption) and set the cookies.
Send the decrypted values back to the server in the headers to simulate a real browser request.
This approach is not recommended because:

It involves mimicking a browser behavior in a server-side environment, which can be challenging and error-prone.
Websites implement such mechanisms to prevent exactly this kind of behavior.
Using a Headless Browser (e.g., Puppeteer): Another approach is to use a headless browser like Puppeteer to handle the JavaScript challenge. Puppeteer is capable of running JavaScript and handling cookies, just like a browser. It can be used to fetch the correct response from the server and pass the data back to your proxy server.

However, this adds more complexity and resource usage to your solution and might not be practical for an ESP32-based IoT system.

Use an API Gateway or a Service That Bypasses JavaScript Checks: Some services can bypass JavaScript challenges (like 2Captcha or AntiCaptcha), where a service solves CAPTCHAs and JavaScript challenges automatically. These are paid services and would add overhead.

Requesting API Access or Exemption from the Website (best solution): The most reliable approach would be to contact the administrator of the sarbeacon.infinityfreeapp.com website and request direct API access to bypass the JavaScript challenge. Websites often provide API keys or alternative methods to access data without triggering these challenges. This would be the most efficient and sustainable solution for your use case.

Practical Recommendation:
Given the challenges above, the most practical recommendation is to contact the hosting provider or the website owner and request access to a real API endpoint that bypasses the JavaScript challenge, or ask them if they provide a more direct method for sending data to the server. This will make it much easier to send data without worrying about browser-based protections like JavaScript challenges.